pipeline {
    agent any

    tools {
        maven 'maven 3.9.9'
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Check out the main branch from the repository
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/maven-sonar-integration']],
                        userRemoteConfigs: [[url: 'https://github.com/timucinozkan/simple-java-maven-app']]
                        ])
                }
            }
        }
        stage('Build'){
            steps{
                script{
                    echo 'Building the application'
                    sh 'mvn -B -DskipTests clean package'
                }
            }
        }
        stage('Test'){
            steps{
                sh 'mvn test'
            }
            post{
                always{
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Code Analysis') {
            // environment {
            //    scannerHome = tool 'Sonar'
            //}
            steps {
                script {
                    // sources: path to analyze, projectKey: sonar project name
                    withSonarQubeEnv(credentialsId: 'maven-sonar', installationName: 'Sonar') {
                        sh "mvn sonar:sonar -Psonar-analysis"
                        //sh "${scannerHome}/bin/sonar-scanner \
                        //    -Dsonar.projectKey=maven-sonar \
                        //    -Dsonar.sources=. \
                        //    -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }
        stage('Quality Gate'){
            steps{
                script{
                    timeout(time: 3, unit:'MINUTES'){
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}